{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Constraint Satisfaction Problem for Depth First Search","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ynqabLgm-6bl","colab_type":"text"},"source":["# DFS(Depth-First Search)- Algorithm\n","\n","Consider this scenario: There are city with names A, B, C, D, E, F, G and H<br>\n","This is the connection between the cities:<br>\n","A is connected to B<br>\n","A is connected to C<br>\n","B is connected to D<br>\n","B is connected to E<br>\n","C is connected to F<br>\n","C is connected to G<br>\n","E is connected to H<br>\n","<img width=\"403\" alt=\"screen shot 2018-03-21 at 12 40 46 pm 2\" src=\"https://drive.google.com/file/d/1g1CrQbSmw0wYm2QyzwASXMnQ5vXBQnMR/view\">"]},{"cell_type":"code","metadata":{"id":"ux6rBAgN5EVk","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600277553999,"user_tz":-360,"elapsed":1105,"user":{"displayName":"Taki Uddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWTddTNVX7fLPB3DQq7yWGPn4O16xugoDAZkeO=s64","userId":"13226093304721212060"}}},"source":["graph = {'A': set(['B', 'C']),\n","         'B': set(['A', 'D', 'E']),\n","         'C': set(['A', 'F','G']),\n","         'D': set(['B']),\n","         'E': set(['B', 'H']),\n","         'F': set(['C']),\n","\t 'G': set(['C']),\n","\t 'H': set(['E'])}\n","\n","def dfs_paths(graph, start, destination, path=None):\n","   if destination == start:\n","     yield path + [destination]\n","   if path is None:\n","     path = []\n","   path = path + [start]\n","   for node in graph[start] - set(path):\n","     for result in dfs_paths(graph, node, destination, path):\n","       yield result\n","\n","#list(dfs_paths(graph,'H','F'))"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"bIc9Ot_A5NO0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1600277557243,"user_tz":-360,"elapsed":1569,"user":{"displayName":"Taki Uddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWTddTNVX7fLPB3DQq7yWGPn4O16xugoDAZkeO=s64","userId":"13226093304721212060"}},"outputId":"d529c059-4869-47bc-dba9-2ceafc5d556a"},"source":["def dfs_iterative(graph, start):\n","    stack = [start] #start\n","    path = [] #empty\n","\n","    while stack: #stack is not empty\n","        vertex = stack.pop() #get first node to vertex \n","        if vertex in path: #node already in path\n","            continue #skip\n","        path.append(vertex) #start adding node to path\n","        for neighbor in graph[vertex]: #start exploring other node\n","            stack.append(neighbor) #add neighbor node to stack\n","\n","    return path\n","\n","\n","adjacency_matrix = {1: [2, 3], 2: [4, 5],\n","                    3: [5], 4: [6], 5: [6],\n","                    6: [7], 7: []}\n","\n","print(dfs_iterative(adjacency_matrix, 1))\n","\n","#python3 dfs_non_recursive.py"],"execution_count":13,"outputs":[{"output_type":"stream","text":["[1, 3, 5, 6, 7, 2, 4]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QF54DE0o5auT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1600277560690,"user_tz":-360,"elapsed":1311,"user":{"displayName":"Taki Uddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiWTddTNVX7fLPB3DQq7yWGPn4O16xugoDAZkeO=s64","userId":"13226093304721212060"}},"outputId":"4ddd200a-aeee-4f56-f783-73e687a607aa"},"source":["graph = {'A': ['B','C'],\n","         'B': ['A','D','E'],\n","         'C': ['F','G','A'],\n","\t 'D': ['B'],\n","\t 'E': ['H','B'],\n","\t 'F': ['C'],\n","\t 'G': ['C'],\n","\t 'H': ['E']}\n","\n","def dfs(graph,start,end,route,list):\n","    route+=[start]\n","    if start == end:\n","        list.extend(route)\n","    else:\n","        for node in graph[start]:\n","            if node not in route:\n","                dfs(graph,node,end,route,list)\n","\n","def dfs_route(graph,start,end):\n","      list = []\n","      dfs(graph,start,end,[],list)\n","      return list\n","\n","print(dfs_route(graph,'A','D'))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["['A', 'B', 'D']\n"],"name":"stdout"}]}]}